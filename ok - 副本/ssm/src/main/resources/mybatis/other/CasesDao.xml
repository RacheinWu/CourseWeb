<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.he.ssm.dao.other.CasesDao">
    <!--字段映射-->
    <resultMap id="BaseResultMap" type="com.he.ssm.entity.other.Cases">
        <id property="id"    column="id"    />
        <result property="titile"    column="titile"    />
        <result property="author"    column="author"    />
        <result property="publisher"    column="publisher"    />
        <result property="content"    column="content"    />
        <result property="lastId"    column="lastId"    />
        <result property="lastTitle"    column="lastTitle"    />
        <result property="nextId"    column="nextId"    />
        <result property="nextTitle"    column="nextTitle"    />
        <result property="state"    column="state"    />
        <result property="createDate"    column="createDate"    />
        <result property="publishDate"    column="publishDate"    />
    </resultMap>
    <!--所有字段-->
    <sql id="Base_Column_List">
         id, titile, author, publisher, content, lastId, lastTitle, nextId, nextTitle, state, createDate, publishDate    </sql>
    <!--插入-->
    <insert id="insert" parameterType="com.he.ssm.entity.other.Cases" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
        insert into cases(titile,author,publisher,content,lastId,lastTitle,nextId,nextTitle,state,createDate,publishDate)
        values(#{titile},#{author},#{publisher},#{content},#{lastId},#{lastTitle},#{nextId},#{nextTitle},#{state},#{createDate},#{publishDate})
    </insert>
    <!--删除-->
    <delete id="deleteByPrimaryKey" parameterType="Long">
        delete from cases where id = #{id}
    </delete>
    <!--删除-->
    <delete id="deleteByPrimaryKeyIn">
        delete from cases where id in
        <foreach collection="idList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <!--更新-->
    <update id="updateByPrimaryKey" parameterType="com.he.ssm.entity.other.Cases">
        update cases set titile = #{titile}, author = #{author}, publisher = #{publisher}, content = #{content}, lastId = #{lastId}, lastTitle = #{lastTitle}, nextId = #{nextId}, nextTitle = #{nextTitle}, state = #{state}, createDate = #{createDate}, publishDate = #{publishDate}        where id = #{id}
    </update>
    <!--查询-->
    <select id="selectByPrimaryKey" parameterType="Long" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from cases
        where id = #{id}
    </select>
    <!--查询-->
    <select id="findByCondition" parameterType="com.he.ssm.entity.other.Cases" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from cases
        <where>  
            <if test="titile != null  and titile != ''"> and titile like concat('%', #{titile}, '%')</if>
            <if test="state != null  and state != ''"> and state = #{state}</if>
            <if test="beginPublishDate != null"> and publishDate <![CDATA[ >= ]]> #{beginPublishDate}</if>
            <if test="endPublishDate != null"> and publishDate <![CDATA[ <= ]]> #{endPublishDate}</if>
        </where>
    </select>
    <!--查询-->
    <select id="findByAll" parameterType="com.he.ssm.entity.other.Cases" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from cases
        <where>
            <if test="titile != null  and titile != ''"> and titile= #{titile}</if>
            <if test="state != null  and state != ''"> and state = #{state}</if>
            <if test="beginPublishDate != null"> and publishDate <![CDATA[ >= ]]> #{beginPublishDate}</if>
            <if test="endPublishDate != null"> and publishDate <![CDATA[ <= ]]> #{endPublishDate}</if>
        </where>
    </select>
    <!--auto generated by MybatisCodeHelper on 2021-03-09-->
    <update id="updateStateById">
        update cases
        set `state`=#{updatedState},publishDate=#{publishDate}
        where id=#{id}
    </update>

<!--auto generated by MybatisCodeHelper on 2021-03-11-->
    <select id="findByStateOrderByPublishDateDesc" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from cases
        where `state`=#{state}
        <if test="search != null  and search != ''"> and (titile like concat('%', #{search}, '%')  or  author  like concat('%', #{search}, '%') )</if>
        order by publishDate desc
    </select>

<!--auto generated by MybatisCodeHelper on 2021-03-11-->
    <select id="getByPublishDateLessThanOrderByPublishDateDesc" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from cases
        where  state='发布' and publishDate <![CDATA[<]]> #{maxPublishDate} order by publishDate desc  limit 1
    </select>

<!--auto generated by MybatisCodeHelper on 2021-03-11-->
    <select id="getByPublishDateGreaterThanOrderByPublishDate" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from cases
        where  state='发布' and publishDate <![CDATA[>]]> #{minPublishDate} order by publishDate asc  limit 1
    </select>
</mapper>